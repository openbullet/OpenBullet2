@using RuriLib.Models.Jobs
@using OpenBullet2.Models.Hits
@using RuriLib.Models.Hits.HitOutputs
@using RuriLib.Models.Proxies.ProxySources
@using RuriLib.Models.Data.DataPools
@using OpenBullet2.Models.Proxies.Sources
@using System.Globalization
@using RuriLib.Models.Jobs.StartConditions
@using RuriLib.Extensions
@using Microsoft.AspNetCore.Components.Web.Virtualization
@implements IDisposable
@inject Microsoft.Extensions.Localization.IStringLocalizer<MultiRunJobViewer> Loc

<audio id="hit-sound" src="/sounds/hit.wav" />

<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-xl-3 px-0">
            <div class="multirun-options-overview mb-3">
                <!-- Job Options -->
                <p class="fg-custom"><b>@Loc["JobOptions"]</b></p>

                <!-- Config -->
                @if (Job.Config != null)
                {
                    <span class="mb-1">
                        <img src="data:image/png;base64,@Job.Config.Metadata.Base64Image" class="job-viewer-config-image" />
                    </span>
                    <br />
                    <span><b>@Loc["Config"]: </b>@Job.Config.Metadata.Name @Loc["by"] @Job.Config.Metadata.Author</span>
                }
                else
                {
                    <span>@Loc["NoConfig"]</span>
                }
                <br />

                <!-- Data Pool -->
                <span><b>@Loc["DataPool"]: </b></span>
                @switch (Job.DataPool)
                {
                    case WordlistDataPool x:
                        <span>@Loc["Wordlist"] (@x.Wordlist.Name)</span>
                        break;

                    case FileDataPool x:
                        <span>@Loc["File"] (@x.FileName)</span>
                        break;

                    case InfiniteDataPool x:
                        <span>@Loc["InfiniteDataPool"]</span>
                        break;

                    case CombinationsDataPool x:
                        <span>@string.Format(Loc["CombinationsText"], x.CharSet, x.Length)</span>
                        break;

                    case RangeDataPool x:
                        <span>@string.Format(Loc["RangeText"], x.Start, x.Amount, x.Step, x.Pad)</span>
                        break;
                }
                <br />

                <!-- Proxy Mode -->
                <span><b>@Loc["ProxyMode"]: </b>@Job.ProxyMode</span>
                <br />

                <!-- Proxy Sources -->
                <span><b>@Loc["ProxySources"]: </b></span>
                @foreach (var source in Job.ProxySources)
                {
                    @switch (source)
                    {
                        case GroupProxySource x:
                            <span class="fg-tocheck ml-1">@Loc["Group"] (@x.GroupId)</span>
                            break;

                        case FileProxySource x:
                            <span class="fg-hit ml-1">@Loc["File"] (@x.FileName)</span>
                            break;

                        case RemoteProxySource x:
                            <span class="fg-retry ml-1">@Loc["Remote"] (@x.Url)</span>
                            break;
                    }

                }
                <br />

                <!-- Hit Outputs -->
                <span><b>@Loc["HitOutputs"]: </b></span>
                @foreach (var output in Job.HitOutputs)
                {
                    @switch (output)
                    {
                        case DatabaseHitOutput x:
                            <span class="fg-tocheck ml-1">@Loc["Database"]</span>
                            break;

                        case FileSystemHitOutput x:
                            <span class="fg-hit ml-1">@Loc["FileSystem"] (@x.BaseDir)</span>
                            break;

                        case DiscordWebhookHitOutput x:
                            <span class="fg-retry ml-1">@Loc["DiscordWebhook"] (@x.Webhook.TruncatePretty(70))</span>
                            break;
                            
                        case TelegramBotHitOutput x:
                            <span class="fg-retry ml-1">@Loc["TelegramBot"] (ID: @x.Token.Split(':')[0])</span>
                            break;
                    }
                }
                <br />

                <!-- Skip -->
                <span><b>@Loc["Skip"]: </b>@Job.Skip</span>
                <br />

                <!-- Bots -->
                <span class="mr-2"><b>@Loc["Bots"]: </b>@Job.Bots</span>
                @if (!changingBots)
                {
                    <span class="oi oi-pencil" style="cursor: pointer;" @onclick="ChangeBots"></span>
                }
                else
                {
                    <span><i>@Loc["ChangingPleaseWait"]</i></span>
                }
                <br />

                <!-- Change Options Button -->
                @if (Job.Status == JobStatus.Idle)
                {
                    <button class="btn btn-sm btn-outline-primary mt-1" type="button" @onclick="ChangeOptions">@Loc["Change"]</button>
                }
            </div>
        </div>
        <div class="col-4 col-xl-3 px-0">
            <span class="font-weight-bold" style="text-decoration: underline;">@Loc["DataStats"]</span><br /><br />
            <span class="font-weight-bold">@Loc["Tested"]: </span><span>@Job.DataTested</span><br />
            <span class="font-weight-bold fg-hit">@Loc["Hits"]: </span><span class="fg-hit">@Job.DataHits</span><br />
            <span class="font-weight-bold fg-custom">@Loc["Custom"]: </span><span class="fg-custom">@Job.DataCustom</span><br />
            <span class="font-weight-bold fg-fail">@Loc["Fails"]: </span><span class="fg-fail">@Job.DataFails</span><br />
            <span class="font-weight-bold fg-fail">@Loc["Invalid"]: </span><span class="fg-fail">@Job.DataInvalid</span><br />
            <span class="font-weight-bold fg-retry">@Loc["Retried"]: </span><span class="fg-retry">@Job.DataRetried</span><br />
            <span class="font-weight-bold fg-ban">@Loc["Banned"]: </span><span class="fg-ban">@Job.DataBanned</span><br />
            <span class="font-weight-bold fg-tocheck">@Loc["ToCheck"]: </span><span class="fg-tocheck">@Job.DataToCheck</span><br />
            <span class="font-weight-bold fg-error">@Loc["Errors"]: </span><span class="fg-error">@Job.DataErrors</span><br />
        </div>
        <div class="col-4 col-xl-3 px-0">
            <span class="font-weight-bold" style="text-decoration: underline;">@Loc["ProxyStats"]</span><br /><br />
            <span class="font-weight-bold">@Loc["Total"]: </span><span>@Job.ProxiesTotal</span><br />
            <span class="font-weight-bold fg-hit">@Loc["Alive"]: </span><span class="fg-hit">@Job.ProxiesAlive</span><br />
            <span class="font-weight bold fg-fail">@Loc["Bad"]: </span><span class="fg-fail">@Job.ProxiesBad</span><br />
            <span class="font-weight bold fg-ban">@Loc["Banned"]: </span><span class="fg-ban">@Job.ProxiesBanned</span><br />
        </div>
        <div class="col-4 col-xl-3 px-0">
            @if (Job.Progress >= 0)
            {
                <span class="font-weight-bold" style="text-decoration: underline;">@Loc["OtherStats"]</span><br /><br />
                <span class="font-weight-bold">@Loc["CPM"]: </span><span>@Job.CPM</span><br />
                <span class="font-weight-bold">@Loc["CaptchaCredit"]: </span><span>@Job.CaptchaCredit</span><br />
                <span class="font-weight-bold">@Loc["Elapsed"]: </span><span>@((int)Job.Elapsed.TotalDays) @Loc["days"] @Job.Elapsed.ToString(@"hh\:mm\:ss")</span><br />
                <span class="font-weight-bold">@Loc["Remaining"]: </span><span>@((int)Job.Remaining.TotalDays) @Loc["days"] @Job.Remaining.ToString(@"hh\:mm\:ss")</span><br />
                <span class="font-weight-bold">@Loc["Progress"]: </span><span>@(Job.DataTested + Job.Skip) / @Job.DataPool.Size (@((Job.Progress * 100).ToString("0.00"))%)</span><br />
                <br />
            }
            else
            {
                <span class="font-weight-bold" style="text-decoration: underline;">@Loc["OtherStats"]</span><br /><br />
                <span class="font-weight-bold">@Loc["CPM"]: </span><span>-</span><br />
                <span class="font-weight-bold">@Loc["CaptchaCredit"]: </span><span>-</span><br />
                <span class="font-weight-bold">@Loc["Elapsed"]: </span><span>-</span><br />
                <span class="font-weight-bold">@Loc["Remaining"]: </span><span>-</span><br />
                <span class="font-weight-bold">@Loc["Progress"]: </span><span>-</span><br />
                <br />
            }
            @foreach (var answer in Job.CustomInputsAnswers)
            {
                <span class="font-weight-bold">@answer.Key: </span><span>@answer.Value</span><br />
            }
        </div>
    </div>
</div>

<p class="fg-custom"><b>@Loc["Controls"]</b></p>
<div class="list-group list-group-horizontal">
    @switch (Job.Status)
    {
        case JobStatus.Idle:
            <button class="btn btn-sm btn-outline-success" @onclick="Start"><span class="oi oi-media-play"></span> @Loc["Start"]</button>
            break;

        case JobStatus.Waiting:
            <span class="mr-3">@Loc["Waiting"]... @Loc["TimeLeft"]:</span>
            @if (Job.StartCondition.Verify(Job)) // If already verified and about to start
            {
                <span>00:00:00</span>
            }
            else // Otherwise display actual wait
            {
                @switch (Job.StartCondition)
                {
                    case RelativeTimeStartCondition x:
                        <span>@(((Job.StartTime + x.StartAfter) - DateTime.Now).ToString(@"hh\:mm\:ss"))</span>
                        break;

                    case AbsoluteTimeStartCondition x:
                        <span>@((x.StartAt - DateTime.Now).ToString(@"hh\:mm\:ss"))</span>
                        break;
                }
            }
            <button class="btn btn-sm btn-outline-danger" @onclick="SkipWait"><span class="oi oi-x"></span> @Loc["SkipWait"]</button>
            break;

        case JobStatus.Paused:
            <button class="btn btn-sm btn-outline-success" @onclick="Resume"><span class="oi oi-media-play"></span> @Loc["Resume"]</button>
            break;

        case JobStatus.Running:
            <button class="btn btn-sm btn-outline-warning" @onclick="Pause"><span class="oi oi-media-pause"></span> @Loc["Pause"]</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="Stop"><span class="oi oi-media-stop"></span> @Loc["Stop"]</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="Abort"><span class="oi oi-x"></span> @Loc["Abort"]</button>
            break;

        case JobStatus.Pausing:
            <span><i>@Loc["PausingMessage"]</i></span>
            break;

        case JobStatus.Stopping:
            <span style="line-height: 30px; margin-top: 5px;"><i>@Loc["StoppingMessage"] </i></span>
            <button class="btn btn-sm btn-outline-danger" @onclick="Abort"><span class="oi oi-x"></span> @Loc["Abort"]</button>
            break;
    }
</div>

@if (Job.Progress >= 0)
{
    <div class="progress mt-3">
        <div class="progress-bar" role="progressbar"
             style="width: @((Job.Progress * 100).ToString("0", CultureInfo.InvariantCulture))%"></div>
    </div>
}

@if (PersistentSettings.OpenBulletSettings.GeneralSettings.DefaultJobDisplayMode == Models.Settings.JobDisplayMode.Detailed)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">@Loc["Data"]</th>
                <th scope="col">@Loc["Proxy"]</th>
                <th scope="col">@Loc["ExecutionInfo"]</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Job.Bots; i++)
            {
                var data = Job.CurrentBotDatas[i];
                if (data == null)
                {
                    <tr>
                        <th scope="row">@(i + 1)</th>
                        <td>...</td>
                        <td>...</td>
                        <td>@Loc["WaitingForData"]...</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <th scope="row">@(i + 1)</th>
                        <td>@data.Line.Data</td>
                        <td>@(data.Proxy == null ? "" : data.Proxy.ToString())</td>
                        <td>@data.ExecutionInfo</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<div class="container-fluid mt-3">
    <div class="row">
        @if (PersistentSettings.OpenBulletSettings.GeneralSettings.EnableJobLogging)
        {
            <div class="col-12 col-xl-6 px-0 pr-xl-2 job-viewer-log-container">
                <GenericLogger JobId="Job.Id" />
            </div>
            <div class="col-12 col-xl-6 mt-3 mt-xl-0 pl-0 pl-xl-2">
                <div class="container-fluid">
                    <div class="row">
                        <div class="list-group list-group-horizontal">
                            <button class="btn btn-sm btn-outline-primary" @onclick="CopyHitData"><span class="oi oi-layers"></span> @Loc["CopyData"]</button>
                            <button class="btn btn-sm btn-outline-primary" @onclick="CopyHitDataCapture"><span class="oi oi-layers"></span> @Loc["CopyDataCapture"]</button>
                            <button class="btn btn-sm btn-outline-primary" @onclick="SendToDebugger"><span class="oi oi-chevron-right"></span> @Loc["SendToDebugger"]</button>
                            <button class="btn btn-sm btn-outline-primary" @onclick="ShowFullLog"><span class="oi oi-excerpt"></span> @Loc["ShowFullLog"]</button>
                            <EditForm Model="hitsFilter">
                                <InputSelect ValueExpression="(() => hitsFilter)" Value="hitsFilter"
                                             ValueChanged="(string value) => OnHitsFilterChanged(value)">
                                    <option value="SUCCESS">@Loc["Hits"]</option>
                                    <option value="CUSTOM">@Loc["Custom"]</option>
                                    <option value="NONE">@Loc["ToCheck"]</option>
                                </InputSelect>
                            </EditForm>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col px-0 job-viewer-hits-container">
                            <!-- HITS -->
                            <div class="job-viewer-hits">
                                <Virtualize Items="Job.Hits" Context="hit" ItemSize="1000">
                                    @if ((hitsFilter == "SUCCESS" && hit.Type == "SUCCESS") ||
                                      (hitsFilter == "NONE" && hit.Type == "NONE") ||
                                      (hitsFilter == "CUSTOM" && hit.Type != "SUCCESS" && hit.Type != "NONE"))
                                    {
                                        <span class="job-viewer-hit" style="color: @GetHitColor(hit); background-color: @(selectedHits.Contains(hit) ? "var(--bg-secondary)" : "invisible")"
                                              @onclick="e => HitClicked(hit, e)">
                                            [@hit.Date] [@hit.Type] @hit.Data.Data |
                                            @(hit.Proxy != null ? $"{hit.Proxy.Host}:{hit.Proxy.Port}" : "-") |
                                            @hit.CapturedDataString
                                        </span>
                                        <br />
                                    }
                                </Virtualize>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="col-12 mt-3 pl-0">
                <div class="container-fluid">
                    <div class="row">
                        <div class="list-group list-group-horizontal">
                            <button class="btn btn-sm btn-outline-primary" @onclick="CopyHitData"><span class="oi oi-layers"></span> @Loc["CopyData"]</button>
                            <button class="btn btn-sm btn-outline-primary" @onclick="CopyHitDataCapture"><span class="oi oi-layers"></span> @Loc["CopyDataCapture"]</button>
                            <button class="btn btn-sm btn-outline-primary" @onclick="SendToDebugger"><span class="oi oi-chevron-right"></span> @Loc["SendToDebugger"]</button>
                            <button class="btn btn-sm btn-outline-primary" @onclick="ShowFullLog"><span class="oi oi-excerpt"></span> @Loc["ShowFullLog"]</button>
                            <EditForm Model="hitsFilter">
                                <InputSelect ValueExpression="(() => hitsFilter)" Value="hitsFilter"
                                             ValueChanged="(string value) => OnHitsFilterChanged(value)">
                                    <option value="SUCCESS">@Loc["Hits"]</option>
                                    <option value="CUSTOM">@Loc["Custom"]</option>
                                    <option value="NONE">@Loc["ToCheck"]</option>
                                </InputSelect>
                            </EditForm>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col px-0 job-viewer-hits-container">
                            <!-- HITS -->
                            <div class="job-viewer-hits">
                                <Virtualize Items="Job.Hits" Context="hit" ItemSize="1000">
                                    @if ((hitsFilter == "SUCCESS" && hit.Type == "SUCCESS") ||
                                     (hitsFilter == "NONE" && hit.Type == "NONE") ||
                                     (hitsFilter == "CUSTOM" && hit.Type != "SUCCESS" && hit.Type != "NONE"))
                                    {
                                        <span class="job-viewer-hit" style="color: @GetHitColor(hit); background-color: @(selectedHits.Contains(hit) ? "var(--bg-secondary)" : "invisible")"
                                              @onclick="e => HitClicked(hit, e)">
                                            [@hit.Date] [@hit.Type] @hit.Data.Data |
                                            @(hit.Proxy != null ? $"{hit.Proxy.Host}:{hit.Proxy.Port}" : "-") |
                                            @hit.CapturedDataString
                                        </span>
                                        <br />
                                    }
                                </Virtualize>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
