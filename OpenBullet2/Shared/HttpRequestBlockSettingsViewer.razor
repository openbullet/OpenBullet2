@using RuriLib.Models.Blocks.Custom
@using RuriLib.Models.Blocks.Custom.HttpRequest
@using RuriLib.Models.Blocks.Settings
@inject Microsoft.Extensions.Localization.IStringLocalizer<HttpRequestBlockSettingsViewer> Loc

<EditForm Model="Block">
    <h6 class="font-weight-bold fg-custom">@Loc["Label"]:</h6>
    <InputText Value="@Block.Label" ValueExpression="@(() => Block.Label)"
               ValueChanged="@((value) => { Block.Label = value; ChangedLabel.InvokeAsync(EventArgs.Empty); })" />
</EditForm>

<h6 class="font-weight-bold fg-custom mt-3">@Loc["Settings"]:</h6>
<BlockInputField BlockSetting="@Block.Settings["url"]" />

<div class="row">
    <div class="col">
        <BlockInputField BlockSetting="@Block.Settings["method"]" />
    </div>
    <div class="col">
        <BlockInputField BlockSetting="@Block.Settings["httpVersion"]" />
    </div>
</div>

<div class="row">
    <div class="col">
        <BlockInputField BlockSetting="@Block.Settings["autoRedirect"]" />
    </div>
    <div class="col">
        <BlockInputField BlockSetting="@Block.Settings["alwaysSendContent"]" />
    </div>
    <div class="col">
        <BlockInputField BlockSetting="@Block.Settings["decodeHtml"]" />
    </div>
</div>

<RadzenRadioButtonList @bind-Value="type" TValue="RequestParamsType" Change="@((args) => Change(args))">
    <Items>
        <RadzenRadioButtonListItem Text="Standard" Value="RequestParamsType.Standard" />
        <RadzenRadioButtonListItem Text="Raw" Value="RequestParamsType.Raw" />
        <RadzenRadioButtonListItem Text="Basic Auth" Value="RequestParamsType.BasicAuth" />
        <RadzenRadioButtonListItem Text="Multipart" Value="RequestParamsType.Multipart" />
    </Items>
</RadzenRadioButtonList>
<br />

<EditForm Model="Block">
    @switch (Block.RequestParams)
    {
        case StandardRequestParams x:
            <BlockInputField BlockSetting="x.Content" />
            <BlockInputField BlockSetting="x.ContentType" />
            <BlockInputField BlockSetting="@Block.Settings["urlEncodeContent"]" />
            break;

        case RawRequestParams x:
            <BlockInputField BlockSetting="x.Content" />
            <BlockInputField BlockSetting="x.ContentType" />
            break;

        case BasicAuthRequestParams x:
            <BlockInputField BlockSetting="x.Username" />
            <BlockInputField BlockSetting="x.Password" />
            break;

        case MultipartRequestParams x:
            <BlockInputField BlockSetting="x.Boundary" />
            <MultipartSettingsViewer Contents="x.Contents" />
            break;
    }
</EditForm>

<BlockInputField BlockSetting="@Block.Settings["customCookies"]" />
<BlockInputField BlockSetting="@Block.Settings["customHeaders"]" />
<BlockInputField BlockSetting="@Block.Settings["timeoutMilliseconds"]" />
<BlockInputField BlockSetting="@Block.Settings["maxNumberOfRedirects"]" />
<BlockInputField BlockSetting="@Block.Settings["absoluteUriInFirstLine"]" />
<BlockInputField BlockSetting="@Block.Settings["readResponseContent"]" />
<BlockInputField BlockSetting="@Block.Settings["codePagesEncoding"]" />

<h6 class="font-weight-bold fg-custom mt-3">@Loc["AdvancedSettings"]:</h6>
<BlockInputField BlockSetting="@Block.Settings["securityProtocol"]" />
<BlockInputField BlockSetting="@Block.Settings["useCustomCipherSuites"]" />

@if (showCipherSuites)
{
    <div>
        <span class="oi oi-caret-bottom mr-2" style="cursor: pointer;" @onclick="() => showCipherSuites = false"></span>
        <span style="display: inline;">@Loc["Hide"]</span>
    </div>
    <BlockInputField BlockSetting="@Block.Settings["customCipherSuites"]" />
}
else
{
    <div>
        <span class="oi oi-caret-right mr-2" style="cursor: pointer;" @onclick="() => showCipherSuites = true"></span>
        <span style="display: inline;">@Loc["Show"]</span>
    </div>
}

<br />
<BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02, help1x03, help1x04 }" />

@code {
    [Parameter] public HttpRequestBlockInstance Block { get; set; }
    [Parameter] public EventCallback ChangedLabel { get; set; }
    private bool showCipherSuites = true;
    private RequestParamsType type = RequestParamsType.Standard;

    private StandardRequestParams cachedStandard = new();
    private RawRequestParams cachedRaw = new();
    private BasicAuthRequestParams cachedBasicAuth = new();
    private MultipartRequestParams cachedMultipart = new();

    private string help1x00 => Loc["Help1x00"];
    private string help1x01 => Loc["Help1x01"];
    private string help1x02 => Loc["Help1x02"];
    private string help1x03 => Loc["Help1x03"];
    private string help1x04 => Loc["Help1x04"];

    enum RequestParamsType
    {
        Standard,
        Raw,
        BasicAuth,
        Multipart
    }

    protected override void OnParametersSet()
    {
        switch (Block.RequestParams)
        {
            case StandardRequestParams x:
                cachedStandard = x;
                type = RequestParamsType.Standard;
                break;

            case RawRequestParams x:
                cachedRaw = x;
                type = RequestParamsType.Raw;
                break;

            case BasicAuthRequestParams x:
                cachedBasicAuth = x;
                type = RequestParamsType.BasicAuth;
                break;

            case MultipartRequestParams x:
                cachedMultipart = x;
                type = RequestParamsType.Multipart;
                break;

            default:
                throw new NotImplementedException();
        }

        var useSuites = Block.Settings["useCustomCipherSuites"];
        showCipherSuites = useSuites.InputMode == SettingInputMode.Variable || (useSuites.FixedSetting as BoolSetting).Value;
    }

    private void Change(RequestParamsType? value)
    {
        if (value.HasValue)
        {
            Block.RequestParams = value.Value switch
            {
                RequestParamsType.Standard => cachedStandard,
                RequestParamsType.Raw => cachedRaw,
                RequestParamsType.BasicAuth => cachedBasicAuth,
                RequestParamsType.Multipart => cachedMultipart,
                _ => throw new NotImplementedException()
            };
        }
    }
}