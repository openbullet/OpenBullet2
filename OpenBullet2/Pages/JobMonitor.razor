@page "/monitor"
@using RuriLib.Models.Jobs.Monitor.Triggers
@using RuriLib.Models.Jobs.Monitor.Actions 
@inject Microsoft.Extensions.Localization.IStringLocalizer<JobMonitor> Loc
@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid">
    <div class="row mb-2">
        <div class="list-group list-group-horizontal">
            <button class="btn btn-sm btn-outline-success" @onclick="AddNew"><span class="oi oi-plus"></span> @Loc["New"]</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="RemoveAll"><span class="oi oi-x"></span> @Loc["RemoveAll"]</button>
        </div>
    </div>
    @foreach (var ta in MonitorService.TriggeredActions)
    {
        <div class="triggered-action-container">
            <div class="row" style="margin-top: 5px;">
                <div class="col-xl-2 col-12 mb-xl-0 mb-3">
                    <span>@Loc["Job"]:</span>
                    <input type="number" @bind="ta.JobId" />
                    <span>@Loc["Active"]:</span>
                    <input type="checkbox" @bind="ta.IsActive" /><br />
                    <span>@Loc["Repeatable"]:</span>
                    <input type="checkbox" @bind="ta.IsRepeatable" /><br />
                    <span>@Loc["Executing"]: @ta.IsExecuting</span><br />
                    <span>@Loc["Executions"]: @ta.Executions</span><br />
                    <button class="btn btn-outline-primary mt-2" @onclick="(() => ta.Reset())">@Loc["Reset"]</button><br />
                    <button class="btn btn-outline-danger mt-2" @onclick="(() => Remove(ta))">@Loc["Remove"]</button>
                </div>
                <div class="col-xl-5 col-lg-6 col-12">
                    <h5>@Loc["Triggers"]:</h5>
                    <p>@Loc["TriggersDescription"].</p>
                    <div class="row pl-2 mb-2">
                        <div class="list-group list-group-horizontal">
                            <button class="btn btn-sm btn-outline-success" @onclick="(async () => await AddNewTrigger(ta))"><span class="oi oi-plus"></span> @Loc["New"]</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="(() => RemoveAllTriggers(ta))"><span class="oi oi-x"></span> @Loc["RemoveAll"]</button>
                        </div>
                    </div>
                    @foreach (var trigger in ta.Triggers)
                    {
                        <div class="row justify-content-lg-center triggered-action-row pl-2 pr-2">
                            <div class="col p-0">
                                @switch (trigger)
                                {
                                    case HitCountTrigger t:
                                        <span>@Loc["Hits"] @t.Comparison @t.Amount</span>
                                        break;

                                    case CustomCountTrigger t:
                                        <span>@Loc["Customs"] @t.Comparison @t.Amount</span>
                                        break;

                                    case ToCheckCountTrigger t:
                                        <span>@Loc["ToChecks"] @t.Comparison @t.Amount</span>
                                        break;

                                    case BanCountTrigger t:
                                        <span>@Loc["Bans"] @t.Comparison @t.Amount</span>
                                        break;

                                    case RetryCountTrigger t:
                                        <span>@Loc["Retries"] @t.Comparison @t.Amount</span>
                                        break;

                                    case ErrorCountTrigger t:
                                        <span>@Loc["Errors"] @t.Comparison @t.Amount</span>
                                        break;

                                    case FailCountTrigger t:
                                        <span>@Loc["Fails"] @t.Comparison @t.Amount</span>
                                        break;

                                    case TestedCountTrigger t:
                                        <span>@Loc["Tested"] @t.Comparison @t.Amount</span>
                                        break;

                                    case AliveProxiesCountTrigger t:
                                        <span>@Loc["AliveProxies"] @t.Comparison @t.Amount</span>
                                        break;

                                    case BannedProxiesCountTrigger t:
                                        <span>@Loc["BannedProxies"] @t.Comparison @t.Amount</span>
                                        break;

                                    case JobFinishedTrigger t:
                                        <span>@Loc["JobFinished"]</span>
                                        break;

                                    case JobStatusTrigger t:
                                        <span>@Loc["JobStatus"] @t.Status</span>
                                        break;

                                    case CPMTrigger t:
                                        <span>@Loc["CPM"] @t.Comparison @t.Amount</span>
                                        break;

                                    case CaptchaCreditTrigger t:
                                        <span>@Loc["CaptchaCredit"] @t.Comparison @t.Amount</span>
                                        break;

                                    case ProgressTrigger t:
                                        <span>@Loc["Progress"] @t.Comparison @t.Amount</span>
                                        break;

                                    case TimeElapsedTrigger t:
                                        <span>@Loc["TimeElapsed"] @t.Comparison @t.Days @Loc["days"] @t.Hours @Loc["hours"] @t.Minutes @Loc["minutes"] @t.Seconds @Loc["seconds"]</span>
                                        break;

                                    case TimeRemainingTrigger t:
                                        <span>@Loc["TimeRemaining"] @t.Comparison @t.Days @Loc["days"] @t.Hours @Loc["hours"] @t.Minutes @Loc["minutes"] @t.Seconds @Loc["seconds"]</span>
                                        break;
                                }
                            </div>
                            <div class="col-auto text-right p-1">
                                <button class="btn btn-sm btn-outline-primary" @onclick="(() => EditTrigger(trigger))">
                                    <span class="oi oi-pencil" />
                                </button>
                            </div>
                            <div class="col-auto text-right p-1">
                                <button class="btn btn-sm btn-outline-danger" @onclick="(() => ta.Triggers.Remove(trigger))">
                                    <span class="oi oi-x" />
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-xl-5 col-lg-6 col-12 mt-lg-0 mt-3">
                    <h5>@Loc["Actions"]:</h5>
                    <p>@Loc["ActionsDescription"].</p>
                    <div class="row pl-2 mb-2">
                        <div class="list-group list-group-horizontal">
                            <button class="btn btn-sm btn-outline-success" @onclick="(async () => await AddNewAction(ta))"><span class="oi oi-plus"></span> @Loc["New"]</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="(() => RemoveAllActions(ta))"><span class="oi oi-x"></span> @Loc["RemoveAll"]</button>
                        </div>
                    </div>
                    @foreach (var action in ta.Actions)
                    {
                        <div class="row justify-content-lg-center triggered-action-row pr-2 pl-2">
                            <div class="col p-0">
                                @switch (action)
                                {
                                    case SetBotsAction a:
                                        <span>@Loc["SetBotsTo"] @a.Amount @Loc["inJob"] @a.TargetJobId</span>
                                        break;

                                    case WaitAction a:
                                        <span>@Loc["Wait"] @a.Days @Loc["days"] @a.Hours @Loc["hours"] @a.Minutes @Loc["minutes"] @a.Seconds @Loc["seconds"]</span>
                                        break;

                                    case SetRelativeStartConditionAction a:
                                        <span>@Loc["SetRelativeTimeTo"] @a.Days @Loc["days"] @a.Hours @Loc["hours"] @a.Minutes @Loc["minutes"] @a.Seconds @Loc["seconds"] @Loc["inJob"] @a.JobId</span>
                                        break;

                                    case StartJobAction a:
                                        <span>@Loc["StartJob"] @a.JobId</span>
                                        break;

                                    case StopJobAction a:
                                        <span>@Loc["StopJob"] @a.JobId</span>
                                        break;

                                    case DiscordWebhookAction a:
                                        <span>@Loc["Send"] @a.Message @Loc["onWebhook"] @a.Webhook</span>
                                        break;
                                        
                                    case TelegramBotAction a:
                                        <span>@Loc["Send"] @a.Message @Loc["inChat"] @a.ChatId</span>
                                        break;

                                    case ReloadProxiesAction a:
                                        <span>@Loc["ReloadProxies"]</span>
                                        break;
                                }
                            </div>
                            <div class="col-auto text-right p-1">
                                <button class="btn btn-sm btn-outline-primary" @onclick="(() => EditAction(action))">
                                    <span class="oi oi-pencil" />
                                </button>
                            </div>
                            <div class="col-auto text-right p-1">
                                <button class="btn btn-sm btn-outline-danger" @onclick="(() => ta.Actions.Remove(action))">
                                    <span class="oi oi-x" />
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<hr />
<BullettaHelp Title="@help1x00" Messages="new string[] { help1x01, help1x02, help1x03 }" />
<br /><br />

@code {
    private string help1x00 => Loc["Help1x00"];
    private string help1x01 => Loc["Help1x01"];
    private string help1x02 => Loc["Help1x02"];
    private string help1x03 => Loc["Help1x03"];
} 