<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Executed sequentially</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Alive Proxies</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Banned Proxies</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Bans</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Captcha credit</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Customs</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>days</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Edit Action</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Edit Trigger</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Errors</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>Executing</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Executions</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Fails</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>How does this work?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>This is the %Job Monitor%, which contains a list of %triggered actions%. Triggered Actions are in charge of monitoring a job, checking for triggers and executing actions. First of all you should define the %id% of the job to monitor in the numeric textbox. Remember to uncheck the %active% checkbox when setting up the triggers and actions to avoid having them execute accidentally when you're not yet finished with them.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Then you should add some %triggers% and %actions%. Once all of the triggering conditions are true, the Job Monitor will execute all the %actions% you specified in a sequential order until they are exhausted. After executing the actions, the %executions% counter will increase. If the Triggered Action is marked as %repeatable%, triggers will be matches multiple times, otherwise the Triggered Action will set itself as inactive and not trigger ever again.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>The %Reset% button will reset the number of executions to 0. Triggered Actions are saved in the %triggeredActions.json% file, so if you want to back them up or transfer them to another OB instance you should copy this file.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hits</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>hours</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>in job</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Job finished</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Job status</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>minutes</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>on webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progress</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Reload proxies</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Remove All</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Repeatable</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Retries</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Select action type</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Select trigger type</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Set bots to</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Set relative time to</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Start Job</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Stop Job</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Tested</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Time elapsed</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Time remaining</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>To Checks</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Triggers</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>All must be verified at the same time</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Wait</value>
  </data>
  <data name="inChat" xml:space="preserve">
    <value>in chat</value>
  </data>
</root>