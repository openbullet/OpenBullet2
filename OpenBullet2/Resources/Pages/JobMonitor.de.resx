<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Aktionen</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Ausgeführt in Folge</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Aktiv</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Funktionierende Proxies</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Gebannte Proxies</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Ban</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Captcha Guthaben</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>Tage</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Aktion ändern</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Bedingung ändern</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Fehler</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>wird ausgeführt</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Ausführungen</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Nicht funktionierende</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Wie funktioniert das?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Dies ist der %Job Monitor%, der eine Liste von %Bedingten Aktionen% enthält. Die Aufgabe von bedingten Aktionen ist es, einen Job zu überwachen, Bedingungen zu prüfen und Aktionen auszuführen. Als erstes solltest du die %id% des zu überwachenden Jobs im Nummernfeld definieren. Denke daran, beim Konfigurieren von Bedingungen und Aktionen das Kontrollkästchen %Aktiv% zu deaktivieren, um zu verhindern, dass sie versehentlich ausgeführt werden.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Dann solltest du %Bedingungen% und %Aktionen% hinzufügen. Wenn alle Bedingungen erfüllt sind, führt der Job Monitor alle von dir angegebenen %Aktionen% in sequentieller Reihenfolge aus, bis sie erledigt sind. Nach dem Ausführen der Aktionen wird der Zähler %Ausführungen% erhöht. Wenn die bedingte Aktion als %Wiederholend% markiert ist, werden die Aktionen immer dann ausgeführt, wenn die Bedingungen zutreffen, ansonsten wird die bedingte Aktion inaktiv und wird nicht mehr ausgeführt.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Mit der Schaltfläche %Zurücksetzen% wird die Anzahl der Ausführungen auf 0 zurückgesetzt. Die bedingten Aktionen werden in der Datei %triggeredActions.json% gespeichert. Wenn du also eine Sicherungskopie speichern oder sie auf eine andere Instanz von OB2 übertragen möchtest, kannst du diese Datei kopieren.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Treffer</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>Stunden</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>im Job</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Job beendet</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Job Status</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>Minuten</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Neu</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>an Webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Fortschritt</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Proxies neu laden</value>               
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Entfernen</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Alle entfernen</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Wiederholend</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Zurücksetzen</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Wiederholungen</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>Sekunden</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Aktionstyp auswählen</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Bedingungstyp auswählen</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Sende</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Stelle bots auf</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Setzte relative Zeit auf</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Job starten</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Job anhalten</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Getestet</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Vertrichene Zeit</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Restlaufzeit</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>Zur Überprüfung</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Bedingungen</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>Alle müssen zutreffen</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Warten</value>
  </data>
</root>