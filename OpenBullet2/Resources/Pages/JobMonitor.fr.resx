<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ActionsDescription" xml:space="preserve">
    <value>Executed sequentially</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="AliveProxies" xml:space="preserve">
    <value>Proxies Actifs</value>
  </data>
  <data name="BannedProxies" xml:space="preserve">
    <value>Proxies Bannis</value>
  </data>
  <data name="Bans" xml:space="preserve">
    <value>Bans</value>
  </data>
  <data name="CaptchaCredit" xml:space="preserve">
    <value>Crédit captcha</value>
  </data>
  <data name="CPM" xml:space="preserve">
    <value>CPM</value>
  </data>
  <data name="Customs" xml:space="preserve">
    <value>Customs</value>
  </data>
  <data name="days" xml:space="preserve">
    <value>jours</value>
  </data>
  <data name="EditAction" xml:space="preserve">
    <value>Modifier l'action</value>
  </data>
  <data name="EditTrigger" xml:space="preserve">
    <value>Modifier le déclencheur</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Erreurs</value>
  </data>
  <data name="Executing" xml:space="preserve">
    <value>S'exécute</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Executions</value>
  </data>
  <data name="Fails" xml:space="preserve">
    <value>Fails</value>
  </data>
  <data name="Help1x00" xml:space="preserve">
    <value>Comment ça marche?</value>
  </data>
  <data name="Help1x01" xml:space="preserve">
    <value>Il s'agit du %Job Monitor%, qui contient une liste de %actions déclenchées%. Les actions déclenchées sont chargées de surveiller un travail, de vérifier les déclencheurs et d'exécuter des actions. Tout d'abord, vous devez définir le %id% du travail à surveiller dans la zone de texte numérique. N'oubliez pas de décocher la case %active% lors de la configuration des déclencheurs et des actions pour éviter de les exécuter accidentellement lorsque vous n'en avez pas encore fini avec eux.</value>
  </data>
  <data name="Help1x02" xml:space="preserve">
    <value>Ensuite, vous devez ajouter quelques %triggers% et %actions%. Une fois que toutes les conditions de déclenchement sont remplies, Job Monitor exécutera toutes les %actions% que vous avez spécifiées dans un ordre séquentiel jusqu'à ce qu'elles soient épuisées. Après avoir exécuté les actions, le compteur %exécutions% augmentera. Si l'action déclenchée est marquée comme %répétable%, les déclencheurs seront appariés plusieurs fois, sinon l'action déclenchée se définira comme inactive et ne se déclenchera plus jamais.</value>
  </data>
  <data name="Help1x03" xml:space="preserve">
    <value>Le bouton %Reset% réinitialisera le nombre d'exécutions à 0. Les actions déclenchées sont enregistrées dans le fichier %triggeredActions.json%, donc si vous souhaitez les sauvegarder ou les transférer vers une autre instance d'OB, vous devez copier ce fichier.</value>
  </data>
  <data name="Hits" xml:space="preserve">
    <value>Hits</value>
  </data>
  <data name="hours" xml:space="preserve">
    <value>heures</value>
  </data>
  <data name="inJob" xml:space="preserve">
    <value>dans le job</value>
  </data>
  <data name="Job" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="JobFinished" xml:space="preserve">
    <value>Job terminé</value>
  </data>
  <data name="JobStatus" xml:space="preserve">
    <value>Statut du job</value>
  </data>
  <data name="minutes" xml:space="preserve">
    <value>minutes</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nouveau</value>
  </data>
  <data name="onWebhook" xml:space="preserve">
    <value>sur webhook</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progrès</value>
  </data>
  <data name="ReloadProxies" xml:space="preserve">
    <value>Recharger les proxies</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="RemoveAll" xml:space="preserve">
    <value>Supprimer Tous</value>
  </data>
  <data name="Repeatable" xml:space="preserve">
    <value>Répétable</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Réinitialiser</value>
  </data>
  <data name="Retries" xml:space="preserve">
    <value>Re-essais</value>
  </data>
  <data name="seconds" xml:space="preserve">
    <value>secondes</value>
  </data>
  <data name="SelectActionType" xml:space="preserve">
    <value>Sélectionner le type d'action</value>
  </data>
  <data name="SelectTriggerType" xml:space="preserve">
    <value>Sélectionner le type de déclencheur</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Envoyer</value>
  </data>
  <data name="SetBotsTo" xml:space="preserve">
    <value>Définir les bots à</value>
  </data>
  <data name="SetRelativeTimeTo" xml:space="preserve">
    <value>Définir le temps relatif à</value>
  </data>
  <data name="StartJob" xml:space="preserve">
    <value>Démarrer le job</value>
  </data>
  <data name="StopJob" xml:space="preserve">
    <value>Arrêter le job</value>
  </data>
  <data name="Tested" xml:space="preserve">
    <value>Testés</value>
  </data>
  <data name="TimeElapsed" xml:space="preserve">
    <value>Temps écoulé</value>
  </data>
  <data name="TimeRemaining" xml:space="preserve">
    <value>Temps restant</value>
  </data>
  <data name="ToChecks" xml:space="preserve">
    <value>À checker</value>
  </data>
  <data name="Triggers" xml:space="preserve">
    <value>Déclencheurs</value>
  </data>
  <data name="TriggersDescription" xml:space="preserve">
    <value>Doivent tous être vérifiés au même moment</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Attend</value>
  </data>
  <data name="inChat" xml:space="preserve">
    <value>dans le chat</value>
  </data>
</root>